plugins {
    id 'java-library'
}

ext.platformSpecSkipPublishing = true

description = """
The bundled CameraServer plugin. This plugin provides data sources and widgets for viewing MJPEG streams from the WPILib CameraServer.
""".trim()

def javaCppVersion = "1.4.1"

wpilibTools.addNativeResourcesToSourceSet(sourceSets.main)

wpilibTools.deps.wpilibVersion = "2020.+"

wpilibTools.hashResourcesTask.configure {
    it.hashFile = getProject().getLayout().getBuildDirectory().file("ResourceInformation-CameraServer.json")
}

wpilibTools.extractConfigurationTask.configure {
    it.skipWindowsHelperLibrary = true
}

wpilibTools.deps.cscore(dependencies)

dependencies {
    api project(":plugins:networktables")
    api wpilibTools.deps.wpilibJava("cscore")

    implementation group: "org.bytedeco", name: "javacv", version: javaCppVersion

    runtimeOnly group: "org.bytedeco.javacpp-presets", name: "ffmpeg", version: "3.4.2-$javaCppVersion", classifier: wpilibTools.platformMapper.javaCppClassifier
    runtimeOnly group: "org.bytedeco.javacpp-presets", name: "opencv", version: "3.4.1-$javaCppVersion", classifier: wpilibTools.platformMapper.javaCppClassifier
}

def testConfigurationName = 'nativeTestConfig'

configurations {
    nativeTestConfig
}

def testTaskSet = wpilibTools.createNewNativeExtractionConfiguration {
    taskPostfix = 'test'
    configurationName = testConfigurationName
    rootTaskFolder = "$buildDir/nativeTest"
    resourceFileName = 'ResourceInformation.json'
}

configurations.getByName(testConfigurationName).extendsFrom(configurations.getByName(wpilibTools.platformMapper.currentPlatform.platformName + '-wpilib'))

wpilibTools.deps.wpilibConfig(dependencies, testConfigurationName, 'wpiutil')
wpilibTools.deps.wpilibConfig(dependencies, testConfigurationName, 'ntcore')

sourceSets.test.output.dir testTaskSet.assemble, builtBy: testTaskSet.assemble
